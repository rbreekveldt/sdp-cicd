//Jenkins pipeline to provision Hortonworks infrastructure
def azureSubscription = ""
def inputSubscription = ""
def skipRemainingStages = "true"

//data_domain=monitoring resource_group_phase=uat project_name=secuPI application_name=badapp env_type=nifi sdp_admin_public=~/.ssh/sdp_pub project_description='Bad project'

pipeline {
    agent any
    parameters{
            choice(name: 'Subscription', choices: 'Project Azure governance testing\nNon-Prod Data and Processing\nProject CPD\nProject Audience Measurement', description: 'Subscription to provision')
            choice(name: 'data_domain', choices: 'Please select\ndp\nautomation\naccess\nmonitoring', description: 'Data Domain')
            choice(name: 'resource_group_phase', choices: 'Please select\npii_management\ncuration\ndatalake\nintegration\ningestion\nshared', description: 'Resourcegroup Phase')
            string(name: 'project_name', defaultValue:'', description: 'Specify project name')
            choice(name: 'application_name', choices: 'Please select\nsecupi\nhdp\ndata_gateway', description: 'Application name')
            choice(name: 'env_type', choices: 'Please select\nDEV\nSIT\nUAT\nPRD', description: 'Environment type to provision')
            string(name: 'project_description', defaultValue:'', description: 'Specify project description')
            booleanParam(defaultValue: false, name: 'nifi', description: ' ')
            booleanParam(defaultValue: false, name: 'kafka', description: ' ')
            choice(name: 'Cloud', choices: 'azure', description: 'Cloud to provision')
      		
            /* booleanParam(defaultValue: false, name: 'Provision_Cloud_Infra', description: '         Deploy Infrastructure on Cloud')
            booleanParam(defaultValue: false, name: 'Provision_Cluster', description: '         Install Cluster')
      		string(name: 'Nodes_count', defaultValue: '3', description: 'Specify the count for nifi worker nodes')
      		string(name: 'tags', defaultValue: '', description: 'Limit provisioning to these tags') */
       }
    stages {
        stage('Checkout') {
            steps {
                script {
                    if(params.Environment == 'Please select'){
                        skipRemainingStages = false
                    }
                    println "skipRemainingStages 1 = ${skipRemainingStages}"
                }
                checkout scm
            }
        }
        stage('Create env Config') {
            script {
                withCredentials([azureServicePrincipal(credentialsId: '1683b46e-b612-4f6d-a717-9baed4b0dffb',
                                subscriptionIdVariable: 'AZURE_SUBSCRIPTION_ID',
                                clientIdVariable: 'AZURE_CLIENT_ID',
                                clientSecretVariable: 'AZURE_SECRET',
                                tenantIdVariable: 'AZURE_TENANT')]) {
                        
                        ansiblePlaybook credentialsId: 'private_key', inventory: 'inventories/a/hosts', playbook: 'playbooks/create-new-environment.yml'            
                    }

            when {
                expression {
                    skipRemainingStages
                }
            }
            steps {
                script {
                    sh 'bash build_envconfig.sh'
                }
            }
        }
        stage('Provision cloud') {
            when {
                expression {
                    skipRemainingStages
                }
            }
            environment {
                CLOUD_TO_USE = "${Cloud}"
            }
            steps {
                script {
                    if(params.Subscription == "Non-Prod Data and Processing"){
                        azureSubscription = "33bce92f-b1bc-4bd0-a3a1-4cada2623da3"
                    } else if (params.Subscription == "Project Azure governance testing"){
                        azureSubscription = "f9be258b-3adc-4d8f-85c4-36e969384e41"
                    }
                    withCredentials([azureServicePrincipal(credentialsId: '1683b46e-b612-4f6d-a717-9baed4b0dffb',
                                              subscriptionIdVariable: 'AZURE_SUBSCRIPTION_ID',
                                              clientIdVariable: 'AZURE_CLIENT_ID',
                                              clientSecretVariable: 'AZURE_SECRET',
                                              tenantIdVariable: 'AZURE_TENANT')]) {
                     sh 'echo Executeeeeeeeeeee 1'
                    sh 'bash build_cloud.sh'
                    }
                }
            }
        }
        stage('Provision cluster') {
            when {
                expression {
                     skipRemainingStages
                }
            }
            environment {
                CLOUD_TO_USE = "${Cloud}"
            }
            steps {
                sh 'echo Executeeeeeeeeeee 2'
                //sh 'bash install_cluster.sh'
            }
        }
    }
}

