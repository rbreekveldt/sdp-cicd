  //Jenkins pipeline to provision Hortonworks infrastructure
    def azureSubscription = ""
    def inputSubscription = ""
    def skipRemainingStages = "true"

    pipeline {
    agent any
    parameters{
    choice(name: 'Subscription', choices: 'SPAzureGovernanceTesting', description: 'Subscription to provision')
    choice(name: 'ResourceGroup', choices: 'dp-curation-dtest-uat', description: 'Subscription to provision')
    choice(name: 'data_domain', choices: 'dp', description: 'this is the Data Domain')
    choice(name: 'resource_group_phase', choices: 'curation', description: 'Resourcegroup Phase')
    choice(name: 'project_name', choices: 'dtest', description: 'Project Name')
    choice(name: 'env_type', choices: 'uat', description: 'Environment type to provision')
    choice(name: 'nifi_nodes_count', choices: '3', description: 'the amount of current nifi nodes in the cluster')
    choice(name: 'add_nifi_nodes', choices: 'Please select\n1\n2\n3\n4', description: 'choose the amount of nodes to add to the existing for Nifi cluster')
        booleanParam(defaultValue: false, name: 'oozie_db', description: 'Provision an Oozie database')
        booleanParam(defaultValue: false, name: 'hive_db', description: 'Provision a Hive database')
        booleanParam(defaultValue: false, name: 'ranger_db', description: 'Provision a Ranger database')
        }


    stages {

    stage ('Git checkout and switch to Master') {
    steps {
    sh 'git checkout --track origin/mike'
    }
    }

    stage ('update all file') {
    steps {

  withCredentials([azureServicePrincipal(credentialsId: 'SPAzureGovernanceTesting' ,
                                                          subscriptionIdVariable: 'AZURE_SUBSCRIPTION_ID',
                                                          clientIdVariable: 'AZURE_CLIENT_ID',
                                                          clientSecretVariable: 'AZURE_SECRET',
                                                          tenantIdVariable: 'AZURE_TENANT')]) {
                                                          ansiblePlaybook extras: "-e @environments/dp-curation-dtest-uat/all", playbook: 'playbooks/create-new-environment.yml', skippedTags: 'dataproject,create'
  }
  }
  }
/*
    stage ('Install ambari cluster') {
    steps {
  withCredentials([azureServicePrincipal(credentialsId: 'SPAzureGovernanceTesting',
                                                          subscriptionIdVariable: 'AZURE_SUBSCRIPTION_ID',
                                                          clientIdVariable: 'AZURE_CLIENT_ID',
                                                          clientSecretVariable: 'AZURE_SECRET',
                                                          tenantIdVariable: 'AZURE_TENANT')]) {
                                                          ansiblePlaybook credentialsId: 'SDP-Admin', extras: "-e @environments/{{ lookup('env', 'data_domain') }}-{{ lookup('env', 'resource_group_phase') }}-{{ lookup('env', 'project_name') }}-{{ lookup('env', 'env_type') }}/all", inventory: "environments/${params.data_domain}-${params.resource_group_phase}-${params.project_name}-${params.env_type}/azure_rm.yml", playbook: 'playbooks/provision-virtual-environment.yml' , skippedTags: 'hdi,dataproject'
  }
  }
  }
  */
  }
  }
