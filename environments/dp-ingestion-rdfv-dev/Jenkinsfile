  //Jenkins pipeline to provision Data Mockup infrastructure
    def azureSubscription = ""
    def inputSubscription = ""
    def skipRemainingStages = "true"

    pipeline {
    agent any
    parameters{
    choice(name: 'subscription', choices: '', description: 'Subscription to provision')
    choice(name: 'ResourceGroup', choices: 'dp-ingestion-rdfv-dev', description: 'Subscription to provision')
    choice(name: 'data_domain', choices: 'dp', description: 'this is the Data Domain')
    choice(name: 'resource_group_phase', choices: 'ingestion', description: 'Resourcegroup Phase')
    choice(name: 'project_name', choices: 'rdfv', description: 'Project Name')
    choice(name: 'env_type', choices: 'dev', description: 'Environment type to provision')
        booleanParam(defaultValue: false, name: 'sftp', description: 'Provision a SFTP mockup server')
            booleanParam(defaultValue: false, name: 'kafka', description: 'Provision a kafka mockup server')
            string(name: 'oracle_installed', defaultValue: 'Oracle is already installed' )
        }

    environment {
        master_project_name = "${data_domain}-${resource_group_phase}-${project_name}-${env_type}"
        job_type = "jenkinsfile_mockups.j2"
    }
    stages {

    stage ('Git checkout and switch to Master') {
    steps {
    sh 'git checkout --track origin/master'
    }
    }

    stage ('update all file') {
    steps {

  withCredentials([azureServicePrincipal(credentialsId: 'SPAzureGovernanceTesting',
                                                          subscriptionIdVariable: 'AZURE_SUBSCRIPTION_ID',
                                                          clientIdVariable: 'AZURE_CLIENT_ID',
                                                          clientSecretVariable: 'AZURE_SECRET',
                                                          tenantIdVariable: 'AZURE_TENANT')]) {
                                                          ansiblePlaybook extras: "-e @environments/dp-ingestion-rdfv-dev/all", playbook: 'playbooks/create-new-environment.yml', skippedTags: 'create,hdi'
  }
  }
  }

    stage ('Provision Infrastructure') {
    steps {

    withCredentials([azureServicePrincipal(credentialsId: 'SPAzureGovernanceTesting' ,
                                                            subscriptionIdVariable: 'AZURE_SUBSCRIPTION_ID',
                                                            clientIdVariable: 'AZURE_CLIENT_ID',
                                                            clientSecretVariable: 'AZURE_SECRET',
                                                            tenantIdVariable: 'AZURE_TENANT')]) {
                                                            ansiblePlaybook extras: "-e @environments/dp-ingestion-rdfv-dev/all", playbook: 'playbooks/provision-virtual-environment.yml', skippedTags: 'hdi'
  }
  }
  }

    stage ('Install Mockups Infra') {
    steps {
  withCredentials([azureServicePrincipal(credentialsId: 'SPAzureGovernanceTesting',
                                                          subscriptionIdVariable: 'AZURE_SUBSCRIPTION_ID',
                                                          clientIdVariable: 'AZURE_CLIENT_ID',
                                                          clientSecretVariable: 'AZURE_SECRET',
                                                          tenantIdVariable: 'AZURE_TENANT')]) {
                                                          ansiblePlaybook credentialsId: 'SDP-Admin', extras: "-e @environments/dp-ingestion-rdfv-dev/all", inventory: "environments/${params.data_domain}-${params.resource_group_phase}-${params.project_name}-${params.env_type}/azure_rm.yml", playbook: 'playbooks/install-software.yml' , skippedTags: 'hdi,dataproject'
  }
  }
  }
  }
  }
