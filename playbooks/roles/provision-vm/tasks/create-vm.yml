---
# tasks file for create-vm

  - name: Create NIC(s) (with private IP only)
    azure_rm_networkinterface:
      resource_group: "{{ cloud_config.resource_group }}"
      name: "nic-{{ cloud_config.project_name }}-{{ cloud_config.env_type }}{{ count }}"
      virtual_network_name: "{{ cloud_config.network.name }}"
      subnet_name: "{{ cloud_config.subnet.name }}"
      security_group_name: "{{ cloud_config.security_groups.name }}"
      ip_configurations:
        - name: "ipconfig-{{ cloud_config.project_name }}-{{ cloud_config.env_type }}"
          primary: True

  - name: Create  node(s)
    azure_rm_virtualmachine:
      resource_group: "{{ cloud_config.resource_group }}"
      storage_account_name: "{{ cloud_config.storage_account.name }}"
      name: "vm-{{ cloud_config.project_name }}-{{ cloud_config.env_type }}-{{ host_group }}{{ count }}"
      image:
        offer: "{{ cloud_config.vm.image.offer }}"
        publisher: "{{ cloud_config.vm.image.publisher }}"
        sku: "{{ cloud_config.vm.image.sku }}"
        version: "{{ cloud_config.vm.image.version }}"
      vm_size: "{{ flavor }}"
      network_interface_names: "nic-{{ cloud_config.project_name }}-{{ cloud_config.env_type }}"
      ssh_password_enabled: false
      admin_username: "{{ cloud_config.admin_username }}"
      ssh_public_keys:
        - path: "/home/{{ cloud_config.admin_username }}/.ssh/authorized_keys"
          key_data: "{{ cloud_config.ssh.publickey }}"
      state: present
    #   tags:
    #     Cluster: "{{ cluster_name }}"
    #     Role: "{{ outer_loop.host_group }}"
    #     Group: "{{ cluster_name }}-{{ outer_loop.host_group }}"
    # loop_control:
    #   loop_var: local_loop
    # with_sequence: count="{{ outer_loop.count }}" format=-%02x
    # async: 1000
    # poll: 0
    # register: current_nodes_async

# - name: Wait for {{ outer_loop.host_group }} node(s) to be built
#   async_status:
#     jid: "{{ local_loop.ansible_job_id }}"
#   loop_control:
#     loop_var: local_loop
#   with_items: "{{ current_nodes_async.results }}"
#   register: current_nodes
#   until: current_nodes.finished
#   retries: 120
