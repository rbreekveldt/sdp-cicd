//Jenkins pipeline for the infrastructure of environment
 
pipeline {
    agent any
    parameters{
            choice(name: 'Subscription', choices: '{{ lookup( "env", 'Subscription') }}', description: 'Subscription to provision')
            choice(name: 'ResourceGroup', choices: '{{ lookup( "env", 'data_domain') }}-{{ lookup( "env", 'resource_group_phase') }}-{{ lookup( "env", 'project_name') }}-{{ lookup( "env", 'env_type') }}', description: 'Subscription to provision')
            choice(name: 'data_domain', choices: '{{ lookup( "env", 'data_domain') }}', description: 'Data Domain')
            choice(name: 'resource_group_phase', choices: '{{ lookup( "env", 'resource_group_phase') }}', description: 'Resourcegroup Phase')
            choice(name: 'project_name', choices: '{{ lookup( "env", 'project_name') }}', description: 'Project Name')
            choice(name: 'env_type', choices: '{{ lookup( "env", 'env_type') }}', description: 'Environment type to provision')
            string(name: 'nifi_nodes_count', defaultValue: '{{ lookup( "env", 'nifi_nodes_count') }}', description: 'Update the node count')
            choice(name: 'Cloud', choices: 'azure', description: 'Cloud to provision')
       }
    stages {
        stage ('Git checkout and switch to Master') {
            steps {
                sh 'git checkout --track origin/master'
            }
        }
       stage ('(Re) Provision Dataproject') {
            steps {
            withCredentials([azureServicePrincipal(credentialsId: '1683b46e-b612-4f6d-a717-9baed4b0dffb',
                                                  subscriptionIdVariable: 'AZURE_SUBSCRIPTION_ID',
                                                  clientIdVariable: 'AZURE_CLIENT_ID',
                                                  clientSecretVariable: 'AZURE_SECRET',
                                                  tenantIdVariable: 'AZURE_TENANT')]) {
                 ansiblePlaybook extras: "-e @environments/'${params.data_domain}'-'${params.resource_group_phase}'-'${params.project_name}'-'${params.env_type}'/all", playbook: 'playbooks/provision-virtual-environment.yml' , skippedTags: 'hdi'
                 }
            }
        stage ('Provision Dataproject') {
            steps {
            withCredentials([azureServicePrincipal(credentialsId: '1683b46e-b612-4f6d-a717-9baed4b0dffb',
                                                  subscriptionIdVariable: 'AZURE_SUBSCRIPTION_ID',
                                                  clientIdVariable: 'AZURE_CLIENT_ID',
                                                  clientSecretVariable: 'AZURE_SECRET',
                                                  tenantIdVariable: 'AZURE_TENANT')]) {
                 ansiblePlaybook extras: "-e @environments/'${params.data_domain}'-'${params.resource_group_phase}'-'${params.project_name}'-'${params.env_type}'/all", playbook: 'playbooks/provision-virtual-environment.yml', skippedTags: 'hdi'
                 }
            }
        }
        stage ('Install ambari cluster') {
            steps {
            withCredentials([azureServicePrincipal(credentialsId: '1683b46e-b612-4f6d-a717-9baed4b0dffb',
                                                  subscriptionIdVariable: 'AZURE_SUBSCRIPTION_ID',
                                                  clientIdVariable: 'AZURE_CLIENT_ID',
                                                  clientSecretVariable: 'AZURE_SECRET',
                                                  tenantIdVariable: 'AZURE_TENANT')]) {
                  ansiblePlaybook credentialsId: 'SDP-Admin', extras: "-e @environments/'${params.data_domain}'-'${params.resource_group_phase}'-'${params.project_name}'-'${params.env_type}'/all", inventory: "environments/${params.data_domain}-${params.resource_group_phase}-${params.project_name}-${params.env_type}/azure_rm.yml", playbook: 'playbooks/install-software.yml'
                  }
            }
        }            
        }
    }
}
