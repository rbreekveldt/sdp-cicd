  //Jenkins pipeline to provision Hortonworks infrastructure
    def azureSubscription = ""
    def inputSubscription = ""
    def skipRemainingStages = "true"

    pipeline {
    agent any
    parameters{

  choice(name: 'add_nifi_nodes', choices: 'Please select\n1\n2\n3\n4', description: 'choose the amount of nodes to add to the existing for Nifi cluster')
  {% if lookup('env', 'nifi') == 'false' %}
  booleanParam(defaultValue: false, name: 'nifi', description: 'Provision a NIFI cluster')
  {% else %}
  string(name: 'oozie_db_installed', defaultValue: 'The oozie_db is already installed' )
  {% if lookup('env', 'sftp') == 'false' %}
  booleanParam(defaultValue: false, name: 'sftp', description: 'Provision a SFTP mockup server')
  {% if lookup('env', 'oracle') == 'false' %}
  booleanParam(defaultValue: false, name: 'oracle', description: 'Provision a oracle mockup db')
  {% endif %}
  }

    stages {

    stage ('Git checkout and switch to Master') {
    steps {
    sh 'git checkout --track origin/master'
    }
    }

    stage ('update all file') {
    steps {

  withCredentials([azureServicePrincipal(credentialsId: "${env.CREDENTIAL_ID}" ,
                                                          subscriptionIdVariable: 'AZURE_SUBSCRIPTION_ID',
                                                          clientIdVariable: 'AZURE_CLIENT_ID',
                                                          clientSecretVariable: 'AZURE_SECRET',
                                                          tenantIdVariable: 'AZURE_TENANT')]) {
                                                          ansiblePlaybook extras: "-e @environments/{{ lookup('env', 'master_project_name') }}/all", playbook: 'playbooks/update-all-file.yml', skippedTags: 'dataproject,hdi'
  }
  }
  }

    stage ('Install ambari cluster') {
    steps {
  withCredentials([azureServicePrincipal(credentialsId: "${env.CREDENTIAL_ID}",
                                                          subscriptionIdVariable: 'AZURE_SUBSCRIPTION_ID',
                                                          clientIdVariable: 'AZURE_CLIENT_ID',
                                                          clientSecretVariable: 'AZURE_SECRET',
                                                          tenantIdVariable: 'AZURE_TENANT')]) {
                                                          ansiblePlaybook credentialsId: 'SDP-Admin', extras: "-e @environments/{{ lookup('env', 'master_project_name') }}/all", inventory: "environments/${params.data_domain}-${params.resource_group_phase}-${params.project_name}-${params.env_type}/azure_rm.yml", playbook: 'playbooks/install-software.yml' , skippedTags: 'hdi,dataproject'
  }
  }
  }
  }
  }
