  //Jenkins pipeline to provision HDInsight infrastructure
    def azureSubscription = ""
    def inputSubscription = ""
    def skipRemainingStages = "true"

    pipeline {
    agent any
    parameters{
    choice(name: 'Subscription', choices: '{{ lookup( "env", 'Subscription') }}', description: 'Subscription to provision')
    choice(name: 'ResourceGroup', choices: '{{ lookup( "env", 'data_domain') }}-{{ lookup( "env", 'resource_group_phase') }}-{{ lookup( "env", 'project_name') }}-{{ lookup( "env", 'env_type') }}', description: 'Subscription to provision')
    choice(name: 'data_domain', choices: '{{ lookup( "env", 'data_domain') }}', description: 'Data Domain')
    choice(name: 'resource_group_phase', choices: '{{ lookup( "env", 'resource_group_phase') }}', description: 'Resourcegroup Phase')
    choice(name: 'project_name', choices: '{{ lookup( "env", 'project_name') }}', description: 'Project Name')
    choice(name: 'env_type', choices: '{{ lookup( "env", 'env_type') }}', description: 'Environment type to provision')

    {% if lookup('env', 'oozie_db') == 'false' %}
    booleanParam(defaultValue: false, name: 'oozie_db', description: 'Provision an Oozie database')
    {% else %}
    string(name: 'oozie_db_installed', defaultValue: 'The oozie_db is already installed' )
    {% endif %}
    {% if lookup('env', 'hive_db') == 'false' %}
    booleanParam(defaultValue: false, name: 'hive_db', description: 'Provision a Hive database')
    {% else %}
    string(name: 'hive_db_installed', defaultValue: 'The hive_db is already installed' )
    {% endif %}
    {% if lookup('env', 'ranger_db') == 'false' %}
    booleanParam(defaultValue: false, name: 'ranger_db', description: 'Provision a Ranger database')
    {% else %}
    string(name: 'ranger_db_installed', defaultValue: 'The oozie_db is already installed' )
    {% endif %}
    }

    stages {
    stage ('Git checkout and switch to Master') {
    steps {
    sh 'git checkout --track origin/mike'
    }
    }

    stage ('Provision HDI Infrastructure') {
    steps {

  withCredentials([azureServicePrincipal(credentialsId: '{{ lookup('env', 'CREDENTIAL_ID') }}' ,
                                                          subscriptionIdVariable: 'AZURE_SUBSCRIPTION_ID',
                                                          clientIdVariable: 'AZURE_CLIENT_ID',
                                                          clientSecretVariable: 'AZURE_SECRET',
                                                          tenantIdVariable: 'AZURE_TENANT')]) {
                                                          ansiblePlaybook extras: "-e @environments/{{ master_project_name }}/all", playbook: 'playbooks/provision-virtual-environment.yml', skippedTags: 'hdi'
  }
  }
  }

  }
  }
